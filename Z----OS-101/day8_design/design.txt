Q1. What is the use of a strategy pattern? Give an example where it can be used.
Strategy Pattern says that "defines a family of functionality, encapsulate each one, and make them interchangeable".
 The Strategy Pattern is also known as Policy.

 Benefits:
It provides a substitute to subclassing.
It defines each behavior within its own class, eliminating the
need for conditional statements.
It makes it easier to extend and incorporate new behavior without changing the application.
Usage:
When the multiple classes differ only in their behaviors.e.g. Servlet API. It is used when you need different variations of an algorithm.

example:
package design.designpatterns.strategypattern;
public class StrategyClient {
public static void main(String[] args) {
Context context1 = new Context(new Multiply());
System.out.print("Java new Multiply() Strategy " + context1.apply(2, 3)); }
}
interface Strategy {
int compute(int a, int b);
}
class Add implements Strategy { public int compute(int a, int b) {
return a + b; }
}
class Multiply implements Strategy { public int compute(int a, int b) {
return a * b; }
}
class Context {
final Strategy strategy;
public Context(Strategy strategy) { this.strategy = strategy;
}
public int apply(int a, int b) { return strategy.compute(a, b);
} }